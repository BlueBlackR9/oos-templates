{
  "FormatVersion": "OOS-2019-06-01",
  "Description": "Installs cloud assistant on ECS instance by specifying instanceId.",
  "Parameters": {
    "instanceId": {
      "Description": "The Id of ECS instance you will install cloud assistant.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 30
    }
  },
  "Tasks": [
    {
      "Name": "checkInstanceReady",
      "Action": "ACS::CheckFor",
      "Description": "Checks whether the ECS instance status is running or stopped.",
      "Properties": {
        "Service": "ECS",
        "API": "DescribeInstances",
        "Parameters": {
          "InstanceIds": [
            "{{ instanceId }}"
          ]
        },
        "DesiredValues": [
          "Running"
        ],
        "PropertySelector": "Instances.Instance[].Status"
      }
    },
    {
      "Name": "queryCloudAssistantReady",
      "Action": "ACS::ExecuteAPI",
      "Description": "Views the cloud assistanat status.",
      "Properties": {
        "Service": "ECS",
        "API": "DescribeCloudAssistantStatus",
        "Parameters": {
          "InstanceId": [
            "{{ instanceId }}"
          ]
        }
      },
      "Outputs": {
        "cloudAssistantStatus": {
          "Type": "String",
          "ValueSelector": "InstanceCloudAssistantStatusSet.InstanceCloudAssistantStatus[].CloudAssistantStatus"
        }
      }
    },
    {
      "Name": "whetherCloudAssistantIsReady",
      "Action": "ACS::Choice",
      "Description": "Choose next task by CloudAssistant status.",
      "Properties": {
        "DefaultTask": "waitDataRecover",
        "Choices": [
          {
            "When": {
              "Fn::Equals": [
                "true",
                "{{ queryCloudAssistantReady.cloudAssistantStatus }}"
              ]
            },
            "NextTask": "waitCloudAssistantStatusReachtrue"
          }
        ]
      }
    },
    {
      "Name": "waitDataRecover",
      "Action": "ACS::Sleep",
      "Description": "Waits data recover.",
      "Properties": {
        "Duration": "PT1M"
      }
    },
    {
      "Name": "queryCloudAssistantStatus",
      "Action": "ACS::ExecuteAPI",
      "Description": "Views the cloud assistanat status.",
      "Properties": {
        "Service": "ECS",
        "API": "DescribeCloudAssistantStatus",
        "Parameters": {
          "InstanceId": [
            "{{ instanceId }}"
          ]
        }
      },
      "Outputs": {
        "cloudAssistantStatus": {
          "Type": "String",
          "ValueSelector": "InstanceCloudAssistantStatusSet.InstanceCloudAssistantStatus[].CloudAssistantStatus"
        }
      }
    },
    {
      "Name": "whetherCloudAssistantStatusIsTrue",
      "Action": "ACS::Choice",
      "Description": "Choose next task by CloudAssistant status.",
      "Properties": {
        "DefaultTask": "installCloudAssistant",
        "Choices": [
          {
            "When": {
              "Fn::Equals": [
                "true",
                "{{ queryCloudAssistantStatus.cloudAssistantStatus }}"
              ]
            },
            "NextTask": "waitCloudAssistantStatusReachtrue"
          }
        ]
      }
    },
    {
      "Name": "installCloudAssistant",
      "Action": "ACS::ExecuteAPI",
      "Description": "Install cloud assistant with specified instance ID.",
      "Properties": {
        "Service": "ECS",
        "API": "InstallCloudAssistant",
        "Parameters": {
          "InstanceIds": [
            "{{ instanceId }}"
          ]
        }
      }
    },
    {
      "Name": "rebootInstance",
      "Action": "ACS::ExecuteAPI",
      "Description": "Restarts an ECS instance.",
      "Properties": {
        "Service": "ECS",
        "API": "RebootInstance",
        "Parameters": {
          "InstanceId": "{{ instanceId }}"
        }
      }
    },
    {
      "Name": "untilInstanceReady",
      "Action": "ACS::WaitFor",
      "Description": "Waits for the instance restart successfully.",
      "Properties": {
        "Service": "ECS",
        "API": "DescribeInstances",
        "Parameters": {
          "InstanceIds": [
            "{{ instanceId }}"
          ]
        },
        "DesiredValues": [
          "Running"
        ],
        "PropertySelector": "Instances.Instance[].Status"
      }
    },
    {
      "Name": "waitCloudAssistantStatusReachtrue",
      "Action": "ACS::WaitFor",
      "Description": "Wait for the cloud assistant status reach true.",
      "Properties": {
        "Service": "ECS",
        "API": "DescribeCloudAssistantStatus",
        "Parameters": {
          "InstanceIds": [
            "{{ instanceId }}"
          ]
        },
        "DesiredValues": [
          "true"
        ],
        "PropertySelector": "InstanceCloudAssistantStatusSet.InstanceCloudAssistantStatus[].CloudAssistantStatus"
      }
    }
  ]
}