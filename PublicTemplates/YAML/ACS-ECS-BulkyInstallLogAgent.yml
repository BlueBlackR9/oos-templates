FormatVersion: OOS-2019-06-01
Description:
  en: Use this template to install sls agent on ecs
  zh-cn: 使用这个模板批量的在ECS安装日志服务插件
  name-en: ACS-ECS-BulkyInstallLogAgent
  name-zh-cn: 批量安装日志服务插件
  categories:
    - run_command
Parameters:
  regionId:
    Type: String
    Description:
      en: The id of region.
      zh-cn: 地域ID。
    AssociationProperty: RegionId
    Default: '{{ ACS::RegionId }}'
  action:
    Type: String
    AllowedValues:
      - install
      - upgrade
      - uninstall
    Default: install
  targets:
    Type: Json
    AssociationProperty: Targets
    AssociationPropertyMetadata:
      ResourceType: 'ALIYUN::ECS::Instance'
      RegionId: regionId
  rateControl:
    Description:
      en: Concurrency ratio of task execution.
      zh-cn: 任务执行的并发比率。
    Type: Json
    AssociationProperty: RateControl
    Default:
      Mode: Concurrency
      MaxErrors: 0
      Concurrency: 10
  OOSAssumeRole:
    Description: The RAM role to be assumed by OOS.
    Type: String
    Default: OOSServiceRole
RamRole: '{{ OOSAssumeRole }}'
Tasks:
  - Name: getInstance
    Description:
      en: Views the ECS instances.
      zh-cn: 获取ECS实例。
    Action: 'ACS::SelectTargets'
    Properties:
      ResourceType: 'ALIYUN::ECS::Instance'
      RegionId: '{{ regionId }}'
      Filters:
        - '{{ targets }}'
    Outputs:
      instanceIds:
        Type: List
        ValueSelector: 'Instances.Instance[].InstanceId'
      instanceInfos:
        Type: List
        ValueSelector: '.Instances.Instance[] | {"osType":.OSType, "instanceId":.InstanceId}'
  - Name: runCommand
    Action: 'ACS::ECS::RunCommand'
    Properties:
      commandContent:
        'Fn::If':
          - 'Fn::Equals':
              - 'Fn::Jq':
                  - First
                  - '.|map(select(.instanceId == "{{ ACS::TaskLoopItem }}").osType)[]'
                  - '{{ getInstance.instanceInfos }}'
              - linux
          - |-
            wget http://logtail-release-{{ regionId }}.oss-{{ regionId }}-internal.aliyuncs.com/linux64/logtail.sh -O logtail.sh; chmod 755 logtail.sh;  if [ "{{action}}" = "install" ]; then
                ./logtail.sh install {{ regionId }}
            elif [ "{{action}}" = "upgrade" ]; then
                ./logtail.sh upgrade
            else
                ./logtail.sh uninstall
            fi
          - |-
            $action="{{ action }}"

            $pathExistOrNot = Test-Path -Path "C:\Users\Administrator\OOSPackages"
            if ($pathExistOrNot)
            {
              cd C:\Users\Administrator\OOSPackages
            } else
            {
              mkdir C:\Users\Administrator\OOSPackages
              cd C:\Users\Administrator\OOSPackages
              echo 'File created'
            }

            $client = new-object System.Net.WebClient
            $client.DownloadFile('http://logtail-release-{{ regionId }}.oss-{{ regionId }}-internal.aliyuncs.com/win/logtail_installer.zip', 'C:\Users\Administrator\OOSPackages\logtail_installer.zip')
            Expand-Archive -Force -Path C:\Users\Administrator\OOSPackages\logtail_installer.zip -DestinationPath C:\Users\Administrator\OOSPackages
            switch($action)
            {
                "install" {
                    .\logtail_installer.exe install {{ regionId }}
                    echo 'Install complete'
                }
                "upgrade" {
                    .\logtail_installer.exe uninstall
                    .\logtail_installer.exe install {{ regionId }}
                    echo 'upgrade complete'
                }
                "uninstall" {
                    .\logtail_installer.exe uninstall
                    echo 'uninstall complete'
                }
            }
            $allFile = Get-ChildItem -Path "C:\Users\Administrator\OOSPackages"
            foreach($file in $allFile)
            {
              Remove-Item $file.FullName -Recurse -Force
            }
            cd ..
            del C:\Users\Administrator\OOSPackages
      instanceId: '{{ ACS::TaskLoopItem }}'
      regionId: '{{ regionId }}'
      commandType:
        'Fn::If':
          - 'Fn::Equals':
              - 'Fn::Jq':
                  - First
                  - '.|map(select(.instanceId == "{{ ACS::TaskLoopItem }}").osType)[]'
                  - '{{ getInstance.instanceInfos }}'
              - linux
          - RunShellScript
          - RunPowerShellScript
    Loop:
      Items: '{{ getInstance.instanceIds }}'
      RateControl: '{{ rateControl }}'
      Outputs:
        commandOutputs:
          AggregateType: 'Fn::ListJoin'
          AggregateField: commandOutput
    Outputs:
      commandOutput:
        Type: String
        ValueSelector: invocationOutput
Outputs:
  commandOutput:
    Type: String
    Value: '{{ runCommand.commandOutputs }}'
