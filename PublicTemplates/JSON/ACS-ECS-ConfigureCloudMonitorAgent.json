{
  "FormatVersion": "OOS-2019-06-01",
  "Description": {
    "en": "Use this template to install cloud monitor agent on ecs",
    "zh-cn": "\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u6279\u91cf\u7684\u5728ECS\u5b89\u88c5\u4e91\u76d1\u63a7\u63d2\u4ef6",
    "name-en": "ACS-ECS-ConfigureCloudMonitorAgent",
    "name-zh-cn": "\u6279\u91cf\u5b89\u88c5\u4e91\u76d1\u63a7\u63d2\u4ef6",
    "categories": [
      "run_command"
    ]
  },
  "Parameters": {
    "regionId": {
      "Type": "String",
      "Description": {
        "en": "The id of region.",
        "zh-cn": "\u5730\u57dfID\u3002"
      },
      "AssociationProperty": "RegionId",
      "Default": "{{ ACS::RegionId }}"
    },
    "action": {
      "Type": "String",
      "Default": "install",
      "AllowedValues": [
        "install",
        "uninstall"
      ]
    },
    "targets": {
      "Type": "Json",
      "AssociationProperty": "Targets",
      "AssociationPropertyMetadata": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "regionId"
      }
    },
    "rateControl": {
      "Description": {
        "en": "Concurrency ratio of task execution.",
        "zh-cn": "\u4efb\u52a1\u6267\u884c\u7684\u5e76\u53d1\u6bd4\u7387\u3002"
      },
      "Type": "Json",
      "AssociationProperty": "RateControl",
      "Default": {
        "Mode": "Concurrency",
        "MaxErrors": 0,
        "Concurrency": 10
      }
    },
    "OOSAssumeRole": {
      "Description": "The RAM role to be assumed by OOS.",
      "Type": "String",
      "Default": "OOSServiceRole"
    }
  },
  "RamRole": "{{ OOSAssumeRole }}",
  "Tasks": [
    {
      "Name": "getInstance",
      "Description": {
        "en": "Views the ECS instances.",
        "zh-cn": "\u83b7\u53d6ECS\u5b9e\u4f8b\u3002"
      },
      "Action": "ACS::SelectTargets",
      "Properties": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "{{ regionId }}",
        "Filters": [
          "{{ targets }}"
        ]
      },
      "Outputs": {
        "instanceIds": {
          "Type": "List",
          "ValueSelector": "Instances.Instance[].InstanceId"
        },
        "instanceInfos": {
          "Type": "List",
          "ValueSelector": ".Instances.Instance[] | {\"osType\":.OSType, \"instanceId\":.InstanceId}"
        }
      }
    },
    {
      "Name": "runCommand",
      "Action": "ACS::ECS::RunCommand",
      "Properties": {
        "commandContent": {
          "Fn::If": [
            {
              "Fn::Equals": [
                {
                  "Fn::Jq": [
                    "First",
                    ".|map(select(.instanceId == \"{{ ACS::TaskLoopItem }}\").osType)[]",
                    "{{ getInstance.instanceInfos }}"
                  ]
                },
                "linux"
              ]
            },
            "#!/bin/bash\nif [ \"{{action}}\" = \"install\" ]; then\n   VERSION=2.1.56 /bin/bash -c \"$(curl -s https://cms-agent-{{ACS::RegionId}}.oss-{{ACS::RegionId}}-internal.aliyuncs.com/cms-go-agent/cms_go_agent_install-1.4.sh)\"\nelif [ \"{{action}}\" = \"uninstall\" ]; then\n   if [ `uname -m` = \"x86_64\" ]; then\n       ARCH=\"amd64\"\n   else\n       ARCH=\"386\"\n   fi\n   /usr/local/cloudmonitor/CmsGoAgent.linux-${ARCH} uninstall && rm -rf /usr/local/cloudmonitor && echo \"cloud monitor uninstall success.\" >& 2\nelse\n   echo \"command must be install or uninstall\" >& 2\n   exit 1;\nfi",
            "$uname=Get-WmiObject Win32_OperatingSystem |Select-Object -ExpandProperty OSArchitecture\nif ($uname.contains(\"64\"))\n{\n  $ARCH=\"amd64\"\n} else\n{\n  $ARCH=\"386\"\n}\n$pathExistOrNot = Test-Path -Path \"C:\\Program Files\\Alibaba\\cloudmonitor\\CmsGoAgent.windows-$ARCH.exe\"\n$dictoryExisOrNot = Test-Path -Path \"C:\\Program Files\\Alibaba\\cloudmonitor\"\nif ($dictoryExisOrNot)\n{\n  echo \"\"\n} else\n{\n  mkdir C:\\Program Files\\Alibaba\\cloudmonitor\n  echo 'create dictory'\n}\nif ($pathExistOrNot)\n{\n  cd \"C:\\Program Files\\Alibaba\\cloudmonitor\"\n} else\n{\n  cd \"C:\\Program Files\\Alibaba\\cloudmonitor\"\n  $client = new-object System.Net.WebClient\n  $client.DownloadFile(\"http://cms-agent-{{ACS::RegionId}}.oss-{{ACS::RegionId}}-internal.aliyuncs.com/cms-go-agent/2.1.56/CmsGoAgent.windows-$ARCH.exe\", \"C:\\Program Files\\Alibaba\\cloudmonitor\\CmsGoAgent.windows-$ARCH.exe\")\n}\n$action=\"{{ action }}\"\nswitch($action)\n{\n    \"install\" {\n        if ($ARCH -eq \"amd64\")\n        {\n          .\\CmsGoAgent.windows-amd64.exe install\n          .\\CmsGoAgent.windows-amd64.exe start\n        } else\n        {\n          .\\CmsGoAgent.windows-386.exe install\n          .\\CmsGoAgent.windows-386.exe start\n        }\n        echo \"install complete\"\n    }\n    \"uninstall\" {\n       if ($ARCH -eq \"amd64\")\n       {\n          .\\CmsGoAgent.windows-amd64.exe stop\n          .\\CmsGoAgent.windows-amd64.exe uninstall\n       } else\n       {\n          .\\CmsGoAgent.windows-386.exe stop\n          .\\CmsGoAgent.windows-386.exe uninstall\n       }\n        echo \"uninstall complete\"\n    }\n}"
          ]
        },
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "regionId": "{{ regionId }}",
        "commandType": {
          "Fn::If": [
            {
              "Fn::Equals": [
                {
                  "Fn::Jq": [
                    "First",
                    ".|map(select(.instanceId == \"{{ ACS::TaskLoopItem }}\").osType)[]",
                    "{{ getInstance.instanceInfos }}"
                  ]
                },
                "linux"
              ]
            },
            "RunShellScript",
            "RunPowerShellScript"
          ]
        }
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "Type": "String",
          "ValueSelector": "invocationOutput"
        }
      }
    }
  ],
  "Outputs": {
    "commandOutput": {
      "Type": "String",
      "Value": "{{ runCommand.commandOutputs }}"
    }
  }
}