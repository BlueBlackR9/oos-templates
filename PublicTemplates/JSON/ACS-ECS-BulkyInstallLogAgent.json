{
  "FormatVersion": "OOS-2019-06-01",
  "Description": {
    "en": "Use this template to install sls agent on ecs",
    "zh-cn": "\u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u6279\u91cf\u7684\u5728ECS\u5b89\u88c5\u65e5\u5fd7\u670d\u52a1\u63d2\u4ef6",
    "name-en": "ACS-ECS-BulkyInstallLogAgent",
    "name-zh-cn": "\u6279\u91cf\u5b89\u88c5\u65e5\u5fd7\u670d\u52a1\u63d2\u4ef6",
    "categories": [
      "run_command"
    ]
  },
  "Parameters": {
    "regionId": {
      "Type": "String",
      "Description": {
        "en": "The id of region.",
        "zh-cn": "\u5730\u57dfID\u3002"
      },
      "AssociationProperty": "RegionId",
      "Default": "{{ ACS::RegionId }}"
    },
    "action": {
      "Type": "String",
      "AllowedValues": [
        "install",
        "upgrade",
        "uninstall"
      ],
      "Default": "install"
    },
    "overwrite": {
      "Description": {
        "en": "If logAgent exists in the instance, choose whether to overwrite LogAgent(Default no).",
        "zh-cn": "\u5982\u679c\u5b9e\u4f8b\u5185\u5b58\u5728logAgent\u65f6\uff0c\u9009\u62e9\u662f\u5426\u8986\u76d6LogAgent(\u9ed8\u8ba4\u4e0d\u8986\u76d6)\u3002"
      },
      "Type": "Boolean",
      "Default": false
    },
    "targets": {
      "Type": "Json",
      "AssociationProperty": "Targets",
      "AssociationPropertyMetadata": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "regionId"
      }
    },
    "rateControl": {
      "Description": {
        "en": "Concurrency ratio of task execution.",
        "zh-cn": "\u4efb\u52a1\u6267\u884c\u7684\u5e76\u53d1\u6bd4\u7387\u3002"
      },
      "Type": "Json",
      "AssociationProperty": "RateControl",
      "Default": {
        "Mode": "Concurrency",
        "MaxErrors": 0,
        "Concurrency": 10
      }
    },
    "OOSAssumeRole": {
      "Description": "The RAM role to be assumed by OOS.",
      "Type": "String",
      "Default": "OOSServiceRole"
    }
  },
  "RamRole": "{{ OOSAssumeRole }}",
  "Tasks": [
    {
      "Name": "getInstance",
      "Description": {
        "en": "Views the ECS instances.",
        "zh-cn": "\u83b7\u53d6ECS\u5b9e\u4f8b\u3002"
      },
      "Action": "ACS::SelectTargets",
      "Properties": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "{{ regionId }}",
        "Filters": [
          "{{ targets }}"
        ]
      },
      "Outputs": {
        "instanceIds": {
          "Type": "List",
          "ValueSelector": "Instances.Instance[].InstanceId"
        },
        "instanceInfos": {
          "Type": "List",
          "ValueSelector": ".Instances.Instance[] | {\"osType\":.OSType, \"instanceId\":.InstanceId}"
        }
      }
    },
    {
      "Name": "runCommand",
      "Action": "ACS::ECS::RunCommand",
      "Properties": {
        "commandContent": {
          "Fn::If": [
            {
              "Fn::Equals": [
                {
                  "Fn::Jq": [
                    "First",
                    ".|map(select(.instanceId == \"{{ ACS::TaskLoopItem }}\").osType)[]",
                    "{{ getInstance.instanceInfos }}"
                  ]
                },
                "linux"
              ]
            },
            "set -e\ninstallLogAgent(){\n    message=`./logtail.sh install {{ regionId }} 2>/dev/null`\n    if [ $? = 0 ]; then\n        cat /usr/local/ilogtail/app_info.json\n    else\n        echo \"$message\"\n        exit 1\n    fi\n}\nwget http://logtail-release-{{ regionId }}.oss-{{ regionId }}-internal.aliyuncs.com/linux64/logtail.sh -q -O logtail.sh;\nif [ $? != 0 ]; then\n  echo \"Failed to dowmload logtail_installer, Please check your network service.\"\n  exit 1\nfi\nchmod 755 logtail.sh;\nif [ \"{{action}}\" = \"install\" ]; then\n    wetherOverwriteAgent=\"{{overwrite}}\"\n    if [ $wetherOverwriteAgent = \"true\" ]; then\n        installLogAgent\n    else\n        logVersionPath=\"/usr/local/ilogtail/app_info.json\"\n        if [ -f \"$logVersionPath\" ]; then\n            echo 'already has LogAgent'\n            exit 0\n        else\n            installLogAgent\n        fi\n    fi\nelif [ \"{{action}}\" = \"upgrade\" ]; then\n    message=`./logtail.sh upgrade 2>/dev/null`\n    if [ $? = 0 ]; then\n      cat /usr/local/ilogtail/app_info.json\n    else\n      echo \"$message\"\n      exit 1\n    fi\nelse\n    ./logtail.sh uninstall\nfi",
            "function installLogAgent\n{\n    .\\logtail_installer.exe install {{ regionId }}\n    if (! $?)\n     {\n       echo \"Failed to install install log and to start log service Failed, please try again.\"\n       exit 1\n     }\n    echo 'Install complete'\n}\n\n$action=\"{{ action }}\"\n\n$pathExistOrNot = Test-Path -Path \"C:\\Users\\Administrator\\OOSPackages\"\nif ($pathExistOrNot)\n{\n  cd C:\\Users\\Administrator\\OOSPackages\n} else\n{\n  mkdir C:\\Users\\Administrator\\OOSPackages\n  cd C:\\Users\\Administrator\\OOSPackages\n  echo 'File created'\n}\n\n$client = new-object System.Net.WebClient\n$client.DownloadFile('http://logtail-release-{{ regionId }}.oss-{{ regionId }}-internal.aliyuncs.com/win/logtail_installer.zip', 'C:\\Users\\Administrator\\OOSPackages\\logtail_installer.zip')\nif (! $?)\n{\n  echo \"Failed to dowmload logtail_installer, Please check your network service.\"\n  exit 1\n}\nExpand-Archive -Force -Path C:\\Users\\Administrator\\OOSPackages\\logtail_installer.zip -DestinationPath C:\\Users\\Administrator\\OOSPackages\nswitch($action)\n{\n    \"install\" {\n        $wetherOverwriteAgent = \"{{overwrite}}\"\n\n        if ($wetherOverwriteAgent -eq \"true\")\n        {\n            installLogAgent\n        } else\n        {\n            if ([Environment]::Is64BitOperatingSystem)\n            {\n                $logAgentPath = Test-Path -Path \"C:\\Program Files (x86)\\Alibaba\\Logtail\"\n                if ($logAgentPath)\n                {\n                    echo 'already has LogAgent'\n                    exit 0\n                } else\n                {\n                    installLogAgent\n                }\n            } else\n            {\n                $logAgentPath = Test-Path -Path \"C:\\Program Files\\Alibaba\\Logtail\"\n                if ($logAgentPath)\n                {\n                    echo 'already has LogAgent'\n                } else\n                {\n                    installLogAgent\n                }\n            }\n        }\n\n    }\n    \"upgrade\" {\n        .\\logtail_installer.exe uninstall\n        .\\logtail_installer.exe install {{ regionId }}\n        echo 'upgrade complete'\n    }\n    \"uninstall\" {\n        .\\logtail_installer.exe uninstall\n        echo 'uninstall complete'\n    }\n}\n$allFile = Get-ChildItem -Path \"C:\\Users\\Administrator\\OOSPackages\"\nforeach($file in $allFile)\n{\n  Remove-Item $file.FullName -Recurse -Force\n}\ncd ..\ndel C:\\Users\\Administrator\\OOSPackages"
          ]
        },
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "regionId": "{{ regionId }}",
        "commandType": {
          "Fn::If": [
            {
              "Fn::Equals": [
                {
                  "Fn::Jq": [
                    "First",
                    ".|map(select(.instanceId == \"{{ ACS::TaskLoopItem }}\").osType)[]",
                    "{{ getInstance.instanceInfos }}"
                  ]
                },
                "linux"
              ]
            },
            "RunShellScript",
            "RunPowerShellScript"
          ]
        }
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "Type": "String",
          "ValueSelector": "invocationOutput"
        }
      }
    }
  ],
  "Outputs": {
    "commandOutput": {
      "Type": "String",
      "Value": "{{ runCommand.commandOutputs }}"
    }
  }
}